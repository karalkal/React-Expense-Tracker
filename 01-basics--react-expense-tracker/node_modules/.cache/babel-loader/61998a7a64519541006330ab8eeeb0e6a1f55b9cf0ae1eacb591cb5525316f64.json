{"ast":null,"code":"var _jsxFileName = \"/home/kk/GitHub/React-Expense-Tracker/src/App.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport initialExpensesData from './data.js';\nimport NewExpense from './components/NewExpense/NewExpense';\nimport Expenses from './components/Expenses/Expenses';\n\n// OF COURSE you have to set localStorage here, idiot!\n// otherwise it will re-assign itself with the initial array at each App re-render\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlocalStorage.setItem(\"expenses\", JSON.stringify(initialExpensesData));\nconst App = () => {\n  _s();\n  const [expensesFromLocalStorage, setExpensesInLocalStorage] = React.useState(localStorage.getItem(\"expenses\"));\n\n  // In initialExpensesData date is Date\n  // But is stored in localStorage as date:\"2020-08-13T23:00:00.000Z\"\n  // After parsing expensesInLocalStorage date remains string\n  // Hence we need to cast date of new entry to string before adding it to array\n  // console.log(initialExpensesData[1].date)\n  // console.log((JSON.parse(expensesInLocalStorage))[1].date)\n\n  const addExpenseHandler = expense => {\n    const newExpense = {\n      ...expense,\n      date: expense.date.toISOString()\n    };\n    let prevExpArr = JSON.parse(localStorage.getItem(\"expenses\"));\n    let newExpArr = [newExpense, ...prevExpArr];\n\n    // set localStorage with updated array\n    localStorage.setItem(\"expenses\", JSON.stringify(newExpArr));\n\n    //\n    setExpensesInLocalStorage(localStorage.getItem(\"expenses\"));\n    console.log(expensesFromLocalStorage);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NewExpense, {\n      onAddExpense: addExpenseHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Expenses, {\n      items: JSON.parse(expensesFromLocalStorage)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"hpMTkfpa2zqD9Gf53ErzZQcY+Rk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","initialExpensesData","NewExpense","Expenses","jsxDEV","_jsxDEV","localStorage","setItem","JSON","stringify","App","_s","expensesFromLocalStorage","setExpensesInLocalStorage","useState","getItem","addExpenseHandler","expense","newExpense","date","toISOString","prevExpArr","parse","newExpArr","console","log","children","onAddExpense","fileName","_jsxFileName","lineNumber","columnNumber","items","_c","$RefreshReg$"],"sources":["/home/kk/GitHub/React-Expense-Tracker/src/App.js"],"sourcesContent":["import React from 'react';\nimport initialExpensesData from './data.js'\n\nimport NewExpense from './components/NewExpense/NewExpense';\nimport Expenses from './components/Expenses/Expenses';\n\n// OF COURSE you have to set localStorage here, idiot!\n// otherwise it will re-assign itself with the initial array at each App re-render\nlocalStorage.setItem(\"expenses\", JSON.stringify(initialExpensesData));\n\nconst App = () => {\n\n  const [expensesFromLocalStorage, setExpensesInLocalStorage] =\n    React.useState(localStorage.getItem(\"expenses\"));\n\n  // In initialExpensesData date is Date\n  // But is stored in localStorage as date:\"2020-08-13T23:00:00.000Z\"\n  // After parsing expensesInLocalStorage date remains string\n  // Hence we need to cast date of new entry to string before adding it to array\n  // console.log(initialExpensesData[1].date)\n  // console.log((JSON.parse(expensesInLocalStorage))[1].date)\n\n  const addExpenseHandler = expense => {\n    const newExpense = {\n      ...expense,\n      date: (expense.date).toISOString()\n    }\n\n    let prevExpArr = JSON.parse(localStorage.getItem(\"expenses\"));\n    let newExpArr = [newExpense, ...prevExpArr]\n\n    // set localStorage with updated array\n    localStorage.setItem(\"expenses\", JSON.stringify(newExpArr));\n    \n    //\n    setExpensesInLocalStorage(localStorage.getItem(\"expenses\"))\n\n    console.log(expensesFromLocalStorage);\n  };\n\n\n  return (\n    <div>\n      <NewExpense onAddExpense={addExpenseHandler} />\n      <Expenses items={JSON.parse(expensesFromLocalStorage)} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,mBAAmB,MAAM,WAAW;AAE3C,OAAOC,UAAU,MAAM,oCAAoC;AAC3D,OAAOC,QAAQ,MAAM,gCAAgC;;AAErD;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACAC,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEC,IAAI,CAACC,SAAS,CAACR,mBAAmB,CAAC,CAAC;AAErE,MAAMS,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEhB,MAAM,CAACC,wBAAwB,EAAEC,yBAAyB,CAAC,GACzDb,KAAK,CAACc,QAAQ,CAACR,YAAY,CAACS,OAAO,CAAC,UAAU,CAAC,CAAC;;EAElD;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMC,iBAAiB,GAAGC,OAAO,IAAI;IACnC,MAAMC,UAAU,GAAG;MACjB,GAAGD,OAAO;MACVE,IAAI,EAAGF,OAAO,CAACE,IAAI,CAAEC,WAAW;IAClC,CAAC;IAED,IAAIC,UAAU,GAAGb,IAAI,CAACc,KAAK,CAAChB,YAAY,CAACS,OAAO,CAAC,UAAU,CAAC,CAAC;IAC7D,IAAIQ,SAAS,GAAG,CAACL,UAAU,EAAE,GAAGG,UAAU,CAAC;;IAE3C;IACAf,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEC,IAAI,CAACC,SAAS,CAACc,SAAS,CAAC,CAAC;;IAE3D;IACAV,yBAAyB,CAACP,YAAY,CAACS,OAAO,CAAC,UAAU,CAAC,CAAC;IAE3DS,OAAO,CAACC,GAAG,CAACb,wBAAwB,CAAC;EACvC,CAAC;EAGD,oBACEP,OAAA;IAAAqB,QAAA,gBACErB,OAAA,CAACH,UAAU;MAACyB,YAAY,EAAEX;IAAkB;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eAC/C1B,OAAA,CAACF,QAAQ;MAAC6B,KAAK,EAAExB,IAAI,CAACc,KAAK,CAACV,wBAAwB;IAAE;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACrD;AAEV,CAAC;AAAApB,EAAA,CArCKD,GAAG;AAAAuB,EAAA,GAAHvB,GAAG;AAuCT,eAAeA,GAAG;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}