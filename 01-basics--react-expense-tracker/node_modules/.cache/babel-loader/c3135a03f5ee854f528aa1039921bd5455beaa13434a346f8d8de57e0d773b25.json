{"ast":null,"code":"var _jsxFileName = \"/home/kk/GitHub/React-Expense-Tracker/src/App.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport initialExpensesData from './data.js';\nimport NewExpense from './components/NewExpense/NewExpense';\nimport Expenses from './components/Expenses/Expenses';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  localStorage.setItem(\"expenses\", JSON.stringify(initialExpensesData));\n  React.useEffect(() => {\n    window.addEventListener('storage', () => {\n      // When local storage changes, dump the list to\n      // the console.\n      //  setCart(JSON.parse(localStorage.getItem('myCart')) || [])   \n      console.log('myCart');\n    });\n  }, []);\n  const [expensesInLocalStorage, setExpensesInLocalStorage] = React.useState(localStorage.getItem(\"expenses\"));\n  console.log(expensesInLocalStorage);\n\n  // In initialExpensesData date is Date\n  // But is stored in localStorage as date:\"2020-08-13T23:00:00.000Z\"\n  // After parsing expensesInLocalStorage date remains string\n  // Hence we need to cast date of new entry to string before adding it to array\n  // console.log(initialExpensesData[1].date)\n  // console.log((JSON.parse(expensesInLocalStorage))[1].date)\n\n  const addExpenseHandler = expense => {\n    const newExpense = {\n      ...expense,\n      date: expense.date.toISOString()\n    };\n    // console.log(expense.date, newExpense.date, JSON.parse(expensesInLocalStorage)[2].date)\n\n    let prevExpArr = JSON.parse(localStorage.getItem(\"expenses\"));\n    let newExpArr = [newExpense, ...prevExpArr];\n    console.log(prevExpArr);\n    console.log(newExpArr);\n    localStorage.setItem(\"expenses\", JSON.stringify(newExpArr));\n\n    // setExpensesInLocalStorage(() => localStorage.setItem(\"expenses\", JSON.stringify(newExpArr)))\n\n    console.log(expensesInLocalStorage);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NewExpense, {\n      onAddExpense: addExpenseHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Expenses, {\n      items: JSON.parse(expensesInLocalStorage)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"sq8DeJo8a4Oe9jYmZFDgHqMrpPw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","initialExpensesData","NewExpense","Expenses","jsxDEV","_jsxDEV","App","_s","localStorage","setItem","JSON","stringify","useEffect","window","addEventListener","console","log","expensesInLocalStorage","setExpensesInLocalStorage","useState","getItem","addExpenseHandler","expense","newExpense","date","toISOString","prevExpArr","parse","newExpArr","children","onAddExpense","fileName","_jsxFileName","lineNumber","columnNumber","items","_c","$RefreshReg$"],"sources":["/home/kk/GitHub/React-Expense-Tracker/src/App.js"],"sourcesContent":["import React from 'react';\nimport initialExpensesData from './data.js'\n\nimport NewExpense from './components/NewExpense/NewExpense';\nimport Expenses from './components/Expenses/Expenses';\n\n\nconst App = () => {\n  localStorage.setItem(\"expenses\", JSON.stringify(initialExpensesData));\n\n\n  React.useEffect(() => {\n    \n    window.addEventListener('storage', () => {\n      // When local storage changes, dump the list to\n      // the console.\n      //  setCart(JSON.parse(localStorage.getItem('myCart')) || [])   \n       console.log('myCart')   \n    });       \n    }, [])\n\n  const [expensesInLocalStorage, setExpensesInLocalStorage] =\n    React.useState(localStorage.getItem(\"expenses\"));\n\n    console.log(expensesInLocalStorage);\n\n\n  // In initialExpensesData date is Date\n  // But is stored in localStorage as date:\"2020-08-13T23:00:00.000Z\"\n  // After parsing expensesInLocalStorage date remains string\n  // Hence we need to cast date of new entry to string before adding it to array\n  // console.log(initialExpensesData[1].date)\n  // console.log((JSON.parse(expensesInLocalStorage))[1].date)\n\n\n  const addExpenseHandler = expense => {\n    const newExpense = {\n      ...expense,\n      date: (expense.date).toISOString()\n    }\n    // console.log(expense.date, newExpense.date, JSON.parse(expensesInLocalStorage)[2].date)\n\n    let prevExpArr = JSON.parse(localStorage.getItem(\"expenses\"));\n    let newExpArr = [newExpense, ...prevExpArr]\n\n    console.log(prevExpArr)\n    console.log(newExpArr)\n    \n    localStorage.setItem(\"expenses\", JSON.stringify(newExpArr));\n\n    // setExpensesInLocalStorage(() => localStorage.setItem(\"expenses\", JSON.stringify(newExpArr)))\n\n    console.log(expensesInLocalStorage);\n  };\n\n\n  return (\n    <div>\n      <NewExpense onAddExpense={addExpenseHandler} />\n      <Expenses items={JSON.parse(expensesInLocalStorage)} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,mBAAmB,MAAM,WAAW;AAE3C,OAAOC,UAAU,MAAM,oCAAoC;AAC3D,OAAOC,QAAQ,MAAM,gCAAgC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGtD,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChBC,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEC,IAAI,CAACC,SAAS,CAACV,mBAAmB,CAAC,CAAC;EAGrED,KAAK,CAACY,SAAS,CAAC,MAAM;IAEpBC,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAE,MAAM;MACvC;MACA;MACA;MACCC,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;IACxB,CAAC,CAAC;EACF,CAAC,EAAE,EAAE,CAAC;EAER,MAAM,CAACC,sBAAsB,EAAEC,yBAAyB,CAAC,GACvDlB,KAAK,CAACmB,QAAQ,CAACX,YAAY,CAACY,OAAO,CAAC,UAAU,CAAC,CAAC;EAEhDL,OAAO,CAACC,GAAG,CAACC,sBAAsB,CAAC;;EAGrC;EACA;EACA;EACA;EACA;EACA;;EAGA,MAAMI,iBAAiB,GAAGC,OAAO,IAAI;IACnC,MAAMC,UAAU,GAAG;MACjB,GAAGD,OAAO;MACVE,IAAI,EAAGF,OAAO,CAACE,IAAI,CAAEC,WAAW;IAClC,CAAC;IACD;;IAEA,IAAIC,UAAU,GAAGhB,IAAI,CAACiB,KAAK,CAACnB,YAAY,CAACY,OAAO,CAAC,UAAU,CAAC,CAAC;IAC7D,IAAIQ,SAAS,GAAG,CAACL,UAAU,EAAE,GAAGG,UAAU,CAAC;IAE3CX,OAAO,CAACC,GAAG,CAACU,UAAU,CAAC;IACvBX,OAAO,CAACC,GAAG,CAACY,SAAS,CAAC;IAEtBpB,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEC,IAAI,CAACC,SAAS,CAACiB,SAAS,CAAC,CAAC;;IAE3D;;IAEAb,OAAO,CAACC,GAAG,CAACC,sBAAsB,CAAC;EACrC,CAAC;EAGD,oBACEZ,OAAA;IAAAwB,QAAA,gBACExB,OAAA,CAACH,UAAU;MAAC4B,YAAY,EAAET;IAAkB;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eAC/C7B,OAAA,CAACF,QAAQ;MAACgC,KAAK,EAAEzB,IAAI,CAACiB,KAAK,CAACV,sBAAsB;IAAE;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACnD;AAEV,CAAC;AAAA3B,EAAA,CAvDKD,GAAG;AAAA8B,EAAA,GAAH9B,GAAG;AAyDT,eAAeA,GAAG;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}