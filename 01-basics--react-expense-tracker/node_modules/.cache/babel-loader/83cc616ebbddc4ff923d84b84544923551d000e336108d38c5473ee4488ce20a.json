{"ast":null,"code":"var _jsxFileName = \"/home/kk/GitHub/React-Expense-Tracker/src/components/Expenses/Expenses.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ExpenseItem from './ExpenseItem';\nimport Card from '../UI/Card';\nimport ExpensesFilter from './ExpensesFilter';\nimport './Expenses.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Expenses = props => {\n  _s();\n  const [filteredYear, setFilteredYear] = useState('2020');\n\n  // our dates are now strings, hence we aren't using thingie.date.getFullYear().toString() === filteredYear;\n  const items = props.items.filter(thingie => thingie.date.substring(0, 4) === filteredYear);\n\n  // gets selected year from ExpensesFilter.js -->> props.onChangeFilter(event.target.value)\n  // state will change, items will be re-assigned with new filtered array\n  const filterChangeHandler = selectedYear => {\n    setFilteredYear(selectedYear);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      className: \"expenses\",\n      children: [/*#__PURE__*/_jsxDEV(ExpensesFilter, {\n        selected: filteredYear,\n        onChangeFilter: filterChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), items.length === 0 ? /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"no_expenses\",\n        children: [\"`No expenses found for year $\", i.date.substring(0, 4), \".`\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }, this) : items.map(i => /*#__PURE__*/_jsxDEV(ExpenseItem, {\n        id: i.id,\n        title: i.title,\n        amount: i.amount,\n        date: i.date\n      }, i.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_s(Expenses, \"d6AxVjxjRbYO2YFEia8LjUybrDc=\");\n_c = Expenses;\nexport default Expenses;\nvar _c;\n$RefreshReg$(_c, \"Expenses\");","map":{"version":3,"names":["React","useState","ExpenseItem","Card","ExpensesFilter","jsxDEV","_jsxDEV","Expenses","props","_s","filteredYear","setFilteredYear","items","filter","thingie","date","substring","filterChangeHandler","selectedYear","children","className","selected","onChangeFilter","fileName","_jsxFileName","lineNumber","columnNumber","length","i","map","id","title","amount","_c","$RefreshReg$"],"sources":["/home/kk/GitHub/React-Expense-Tracker/src/components/Expenses/Expenses.js"],"sourcesContent":["import React, { useState } from 'react';\n\nimport ExpenseItem from './ExpenseItem';\nimport Card from '../UI/Card';\nimport ExpensesFilter from './ExpensesFilter';\nimport './Expenses.css';\n\nconst Expenses = (props) => {\n  const [filteredYear, setFilteredYear] = useState('2020');\n\n  // our dates are now strings, hence we aren't using thingie.date.getFullYear().toString() === filteredYear;\n  const items = (props.items).filter(thingie => thingie.date.substring(0, 4) === filteredYear)\n\n  // gets selected year from ExpensesFilter.js -->> props.onChangeFilter(event.target.value)\n  // state will change, items will be re-assigned with new filtered array\n  const filterChangeHandler = selectedYear => {\n    setFilteredYear(selectedYear);\n  };\n\n  return (\n    <div>\n      <Card className='expenses'>\n        <ExpensesFilter selected={filteredYear} onChangeFilter={filterChangeHandler} />\n\n        {items.length === 0\n          ? <h2 className='no_expenses'>`No expenses found for year ${i.date.substring(0, 4)}.`</h2>\n          : items.map(i =>\n            <ExpenseItem\n              key={i.id}\n              id={i.id}\n              title={i.title}\n              amount={i.amount}\n              date={i.date}\n            />\n          )}\n\n      </Card>\n    </div>\n  );\n};\n\nexport default Expenses;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAEvC,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,IAAI,MAAM,YAAY;AAC7B,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAO,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExB,MAAMC,QAAQ,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC1B,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,MAAM,CAAC;;EAExD;EACA,MAAMW,KAAK,GAAIJ,KAAK,CAACI,KAAK,CAAEC,MAAM,CAACC,OAAO,IAAIA,OAAO,CAACC,IAAI,CAACC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,KAAKN,YAAY,CAAC;;EAE5F;EACA;EACA,MAAMO,mBAAmB,GAAGC,YAAY,IAAI;IAC1CP,eAAe,CAACO,YAAY,CAAC;EAC/B,CAAC;EAED,oBACEZ,OAAA;IAAAa,QAAA,eACEb,OAAA,CAACH,IAAI;MAACiB,SAAS,EAAC,UAAU;MAAAD,QAAA,gBACxBb,OAAA,CAACF,cAAc;QAACiB,QAAQ,EAAEX,YAAa;QAACY,cAAc,EAAEL;MAAoB;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG,EAE9Ed,KAAK,CAACe,MAAM,KAAK,CAAC,gBACfrB,OAAA;QAAIc,SAAS,EAAC,aAAa;QAAAD,QAAA,GAAC,+BAA6B,EAACS,CAAC,CAACb,IAAI,CAACC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,IAAE;MAAA;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,GACxFd,KAAK,CAACiB,GAAG,CAACD,CAAC,iBACXtB,OAAA,CAACJ,WAAW;QAEV4B,EAAE,EAAEF,CAAC,CAACE,EAAG;QACTC,KAAK,EAAEH,CAAC,CAACG,KAAM;QACfC,MAAM,EAAEJ,CAAC,CAACI,MAAO;QACjBjB,IAAI,EAAEa,CAAC,CAACb;MAAK,GAJRa,CAAC,CAACE,EAAE;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAKT,CACH;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAEE;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACH;AAEV,CAAC;AAACjB,EAAA,CAhCIF,QAAQ;AAAA0B,EAAA,GAAR1B,QAAQ;AAkCd,eAAeA,QAAQ;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}